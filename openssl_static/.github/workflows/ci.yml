name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: macos-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev cmake build-essential
        sudo apt-get install -y libgtest-dev libbenchmark-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl cmake
        brew install googletest google-benchmark

    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DBUILD_TESTS=ON \
          -DBUILD_BENCHMARKS=ON \
          -DBUILD_EXAMPLES=ON

    - name: Build
      run: cmake --build build --config $BUILD_TYPE --parallel

    - name: Test
      working-directory: build
      run: ctest --output-on-failure

    - name: Run examples
      run: |
        if [ -f "build/examples/crypto_examples" ]; then
          ./build/examples/crypto_examples
        fi

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev cmake build-essential
        sudo apt-get install -y libgtest-dev lcov

    - name: Configure CMake with coverage
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_TESTS=ON \
          -DENABLE_COVERAGE=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure

    - name: Generate coverage report
      working-directory: build
      run: |
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage.info
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev cmake build-essential
        sudo apt-get install -y cppcheck valgrind

    - name: Static analysis with cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          projectA/src/ projectB/src/

    - name: Build with AddressSanitizer
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer"
        cmake --build build --parallel

    - name: Run with AddressSanitizer
      run: |
        export ASAN_OPTIONS=detect_leaks=1
        ./build/bin/ProjectB

  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev cmake build-essential
        sudo apt-get install -y libbenchmark-dev

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_BENCHMARKS=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Run benchmarks
      run: |
        if [ -f "build/benchmarks/crypto_benchmark" ]; then
          ./build/benchmarks/crypto_benchmark --benchmark_format=json > benchmark_results.json
        fi

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'googlecpp'
        output-file-path: benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  release:
    needs: [test, coverage, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev cmake build-essential

    - name: Build release
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel

    - name: Package
      run: |
        cd build
        cpack

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false